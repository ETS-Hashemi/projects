from maze import Node, StackFrontier, QueueFrontier


class DFS():
    def __init__(self, maze, visualizer):
        self.maze = maze
        self.visualizer = visualizer
        self.frontier = StackFrontier()
        self.explored = set()

    def solve(self):
        start = Node(state=self.maze.start, parent=None, action=None)
        self.frontier.add(start)

        while not self.frontier.empty():
            node = self.frontier.remove()

            # Visualize the current state
            self.visualizer.draw_maze(agent_position=node.state, explored=self.explored)

            if node.state == self.maze.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                return actions, cells

            self.explored.add(node.state)

            for action, state in self.maze.neighbors(node.state):
                if not self.frontier.contains_state(state) and state not in self.explored:
                    child = Node(state=state, parent=node, action=action)
                    self.frontier.add(child)

        raise Exception("No solution")


class BFS():
    def __init__(self, maze, visualizer):
        self.maze = maze
        self.visualizer = visualizer
        self.frontier = QueueFrontier()
        self.explored = set()

    def solve(self):
        start = Node(state=self.maze.start, parent=None, action=None)
        self.frontier.add(start)

        while not self.frontier.empty():
            node = self.frontier.remove()

            # Visualize the current state
            self.visualizer.draw_maze(agent_position=node.state, explored=self.explored)

            if node.state == self.maze.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                return actions, cells

            self.explored.add(node.state)

            for action, state in self.maze.neighbors(node.state):
                if not self.frontier.contains_state(state) and state not in self.explored:
                    child = Node(state=state, parent=node, action=action)
                    self.frontier.add(child)

        raise Exception("No solution")